[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cross-market-arbitrage-tool"
version = "1.0.0"
description = "Automated tool for finding profitable arbitrage opportunities between MediaMarkt.pt and Amazon EU marketplaces"
authors = [
    {name = "Arbitrage Development Team", email = "dev@arbitrage-tool.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["arbitrage", "e-commerce", "price-monitoring", "automation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "asyncpg>=0.29.0",
    "alembic>=1.12.1",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "httpx>=0.25.2",
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.2",
    "pandas>=2.1.3",
    "sentence-transformers>=2.2.2",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "structlog>=23.2.0",
    "streamlit>=1.28.2",
    "plotly>=5.17.0",
    "python-telegram-bot>=20.7",
    "slack-sdk>=3.26.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.4",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",
    "factory-boy>=3.3.0",
    "black>=24.1.1",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "pydocstyle>=6.3.0",
    "sqlfluff>=3.0.3",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.4",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",
    "factory-boy>=3.3.0",
    "fakeredis>=2.20.1",
    "sqlalchemy-utils>=0.41.1",
]

docs = [
    "sphinx>=7.2.6",
    "sphinx-autodoc-typehints>=2.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/cross-market-arbitrage-tool"
Documentation = "https://cross-market-arbitrage-tool.readthedocs.io/"
Repository = "https://github.com/yourusername/cross-market-arbitrage-tool"
Issues = "https://github.com/yourusername/cross-market-arbitrage-tool/issues"

[project.scripts]
arbitrage-api = "src.main:main"
arbitrage-worker = "src.tasks.worker:main"
arbitrage-dashboard = "src.dashboard.main:main"

# Tool configurations
[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations/versions
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
known_first_party = ["src"]
known_third_party = [
    "fastapi", "sqlalchemy", "celery", "redis", "httpx",
    "playwright", "pandas", "streamlit", "pydantic"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501", "F401"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations/versions"
]
per-file-ignores = [
    "__init__.py:F401",
    "src/models/*.py:F401",
    "tests/*.py:F401,F811"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "migrations.*"
]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85"
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning"
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107"]
match-dir = "(?!migrations).*"

[tool.sqlfluff.core]
dialect = "postgresql"
templater = "jinja"

[tool.sqlfluff.rules]
tab_space_size = 4
max_line_length = 100
indent_unit = "space"
comma_style = "trailing"
allow_scalar = true
single_table_references = "consistent"
unquoted_identifiers_policy = "aliases"

[tool.sqlfluff.rules.capitalisation.keywords]
capitalisation_policy = "upper"

[tool.sqlfluff.rules.capitalisation.identifiers]
extended_capitalisation_policy = "lower"

[tool.sqlfluff.rules.capitalisation.functions]
extended_capitalisation_policy = "upper"

[tool.sqlfluff.rules.capitalisation.literals]
capitalisation_policy = "upper" 